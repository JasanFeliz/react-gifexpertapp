{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAChCR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMd,SACC,uBACEO,KAAO,OACPC,MAAST,EACTU,SAnBmB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCLlBG,G,MAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEhC,OACI,sBAAKC,UAAU,+CAAf,UACI,qBAAKC,IAAOF,EAAMG,IAAMJ,IACxB,kCAAMA,EAAN,Y,uBCPCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACqCO,UAAWF,GADhD,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAYZY,GAZY,4CAAH,sDCGPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAIzB,ECL4B,SAAEA,GAE1B,MAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAyBJ,OApBIC,qBAAY,WAERlB,EAASC,GACJkB,MAAM,SAAAC,GAEJC,YAAW,WAEPC,QAAQC,IAAIH,GACfH,EAAS,CACLV,KAAMa,EACNL,SAAS,MAEX,UAKX,CAACd,IAGDe,EDtB0BQ,CAAcvB,GAAlCW,EAAb,EAAQL,KAAaQ,EAArB,EAAqBA,QAajB,OAZJO,QAAQC,IAAIR,GAaJ,qCACA,qBAAIlB,UAAU,4CAAd,cAA4DI,EAA5D,OAKEc,GAAW,mBAAGlB,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEI,6BAKQe,EAAOH,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEMA,GADEA,EAAIC,eErCtBc,EAAe,WAExB,MAAoC5C,mBAAS,CAAC,kBAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KASA,OACI,qCAGA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI8C,EAAWjB,KAAI,SAAAR,GACX,OAAO,cAAC,EAAD,CACCA,SAAUA,GACHA,YCtB/B0B,IAASC,OACL,cAAC,EAAD,IACCC,SAASC,eAAe,W","file":"static/js/main.6b98c3f3.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n//import GifExpertApp from '../GifExpertApp'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({setcategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n    \r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //Validacion para no agrrgar compos vacios ni inferiores a 2 caracteres\r\n        if ( inputValue.trim().length > 2) {\r\n        setcategories( cats => [inputValue, ...cats]);\r\n        setinputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n         <input\r\n           type = \"text\"\r\n           value = {inputValue}\r\n           onChange = {handleInputChange}\r\n           />  \r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\nsetcategories: PropTypes.func.isRequired\r\n}\r\n\r\n","import React from 'react';\r\nimport \"animate.css\"\r\n\r\n//El componente GifGridItem lo que hace es obtener los gifs en informacion ya \r\n//desestructurada y llevarlos a formato de imagen para presentar en nuestra pagina\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounceInLeft\">\r\n            <img src ={ url } alt= {title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n"," \r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${( encodeURI( category ))}&limit=10&api_key=wZtVjMLI4S02GqvAKAUCCaoD4zzZL0ih`;\r\n    const resp = await fetch(url); \r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    }) \r\n    return gifs; \r\n}","//import React, {useState, useEffect} from 'react'\r\nimport  {GifGridItem } from './GifGridItem';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n   \r\n \r\n//    const [images, setimages] = useState([])    ;\r\nconst { data:images, loading } = useFetchGifs( category );\r\nconsole.log(loading);\r\n//console.log(data)\r\n\r\n//Este hook \"useEffect\" sera movido al custom hook \"useFetchGifs\"\r\n//    useEffect( () => {\r\n//        getGifs( category )\r\n//             .then( setimages );\r\n//    }, [ category ]) \r\n   \r\n\r\n  // getGifs();\r\n\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeInTopRight\"> {category} </h3>\r\n        \r\n        \r\n        \r\n        \r\n        { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n        <div className=\"card-grid\">\r\n        \r\n            <ol> \r\n                {\r\n                    //images.map( img => (\r\n                        //รณ\r\n                        //Podemos desestrucurar\r\n                    images.map( img => (\r\n                       <GifGridItem \r\n                         key={ img.id }\r\n                         {...img}//agregando las propiedades de esta forma podemos emplear cada propiedad de forma independiente\r\n                       /> \r\n                    ))\r\n                }      \r\n            </ol>\r\n        </div>\r\n        </>  \r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from './../helpers/getGifs';\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect ( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n               setTimeout(() => {\r\n\r\n                   console.log(imgs)\r\n                setstate({ \r\n                    data: imgs, \r\n                    loading: false\r\n                });\r\n               }, 1000);\r\n\r\n               \r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\nreturn state; // {data: [], loading: true}\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport {AddCategory} from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['One punch man', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setcategories] = useState(['One punch man'])\r\n    \r\n    // const handleAdd = () => {\r\n    //     //setcategories([...categories, 'Hunter X Hunter']);\r\n    //     //setcategories([ 'Hunter X Hunter', ...categories ]);\r\n    //     //รณ\r\n    //     setcategories(cats => [...cats, 'Hunter X Hunter']);\r\n    //  } \r\n    \r\n    return (\r\n        <>\r\n        \r\n        {/* <button onClick = { handleAdd } >Add category</button> */}\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setcategories={setcategories}/>\r\n        <hr />\r\n        \r\n        <ol>\r\n         {\r\n            categories.map(category => {\r\n                return <GifGrid \r\n                        category={category}\r\n                        key = {category}\r\n                        />\r\n            })\r\n        }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n// GifExpertApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp'\n\n//const divRoot = document.querySelector('#root')\nReactDOM.render(\n    <GifExpertApp />,\n     document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}